Prerequisites
To follow this tutorial, you first need to install LEMP stack on Ubuntu 18.04. If you haven’t already done so, please check out the following tutorial.

How to Install LEMP Stack (Nginx, MariaDB, PHP7.2-FPM) on Ubuntu 18.04
https://www.linuxbabe.com/ubuntu/install-lemp-stack-nginx-mariadb-php7-2-ubuntu-18-04-lts

//

This tutorial is going to show you how to install Nginx, MariaDB and PHP7.2 (LEMP) on Ubuntu 18.04. You can follow this tutorial on a VPS (Virtual Private Server) or on a local Ubuntu 18.04 computer. PHP7.2 is included in Ubuntu 18.04 and has a minor performance improvement over php7.2.

Step 1: Update Software Packages
## Before we install the LEMP stack, it’s a good practice to update repository and software packages by running the following commands on your Ubuntu 18.04 OS.

  $     sudo apt update
  $     sudo apt upgrade
  
Step 2: Install Nginx Web Server
## Nginx is a high performance web server and very popular these days. It also can be used as a reverse proxy and caching server. Enter this command to install Nginx Web server.

  $     sudo apt install nginx
## After it’s installed, we can enable Nginx to auto start when Ubuntu is booted by running the following command.

  $     sudo systemctl enable nginx
## Then start Nginx with this command:

  $     sudo systemctl start nginx
## Now check out its status.

  $     systemctl status nginx
Output:
● nginx.service - A high performance web server and a reverse proxy server
   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)
   Active: active (running) since Thu 2018-05-17 02:20:05 UTC; 2min 56s ago
     Docs: man:nginx(8)
 Main PID: 19851 (nginx)
    Tasks: 2 (limit: 2059)
   CGroup: /system.slice/nginx.service
           ├─19851 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;
           └─19853 nginx: worker process

## “Enabled” indicates that auto start at boot time is enabled and we can see that Nginx is running. Notice that the above command will not immediately quit after running. You need to press “q” to make it quit.

## Check Nginx version.
  $     nginx -v
Output:
nginx version: nginx/1.14.0 (Ubuntu)

## Now type in the public IP address of your Ubuntu 18.04 server in the browser address bar. You should see the “Welcome to Nginx” Web page, which means Nginx Web server is running properly. If you are installing LEMP on your local Ubuntu 18.04 computer, then type 127.0.0.1 or localhost in the browser address bar.

## Finnally, we need to make www-data (Nginx user) as the owner of web directory. By default it’s owned by the root user.
  $     sudo chown www-data:www-data /usr/share/nginx/html -R

Step 3: Install MariaDB Database Server
## MariaDB is a drop-in replacement for MySQL. It is developed by former members of MySQL team who are concerned that Oracle might turn MySQL into a closed-source product. Enter the following command to install MariaDB on Ubuntu 18.04.

  $     sudo apt install mariadb-server mariadb-client
## After it’s installed, MariaDB server should be automatically stared. Use systemctl to check its status.

  $     systemctl status mariadb
Output:
● mariadb.service - MariaDB database server
   Loaded: loaded (/lib/systemd/system/mariadb.service; enabled; vendor preset: enabled)
   Active: active (running) since Thu 2018-05-17 02:39:57 UTC; 49s ago
 Main PID: 21595 (mysqld)
   Status: "Taking your SQL requests now..."
    Tasks: 27 (limit: 2059)
   CGroup: /system.slice/mariadb.service
           └─21595 /usr/sbin/mysqld

## If it’s not running, start it with this command:

  $     sudo systemctl start mariadb
## To enable MariaDB to automatically start at boot time, run

  $     sudo systemctl enable mariadb
## Now run the post installation security script.

  $     $sudo mysql_secure_installation
## When it asks you to enter MariaDB root password, press Enter key as the root password isn’t set yet. Then enter y to set the root password for MariaDB server.

## Next, you can press Enter to answer all remaining questions, which will remove anonymous user, disable remote root login and remove test database. This step is a basic requirement for MariaDB database security. (Notice that Y is capitalized, which means it is the default answer.)

## By default, the MaraiDB package on Ubuntu uses unix_socket to authenticate user login, which basically means you can use username and password of the OS to log into MariaDB console. So you can run the following command to login without providing MariaDB root password.

  $     sudo mariadb -u root
## To exit, run

  $     exit;
## Check MariaDB server version information.

  $     mariadb --version
## As you can see, we have installed MariaDB 10.1.29.

  $     mariadb Ver 15.1 Distrib 10.1.29-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2
  
Step 4: Install PHP7.2
## PHP7.2 is included in Ubuntu 18.04 repository and has a minor performance imrovement over PHP7.1. Enter the following command to install php7.2 and some common extensions.

   $      sudo apt install php7.2 php7.2-fpm php7.2-mysql php-common php7.2-cli php7.2-common php7.2-json php7.2-opcache php7.2-readline php7.2-mbstring php7.2-xml php7.2-gd php7.2-curl

## PHP extensions are commonly needed for content management systems (CMS) like WordPress. For example, if your installation lacks php7.2-xml, then some of your WordPress site pages may be blank and you can find an error in Nginx error log like:

  $     PHP message: PHP Fatal error:  Uncaught Error: Call to undefined function xml_parser_create()
## Installing these PHP extensions ensures that your CMS runs smoothly. Now start php7.2-fpm.

  $     sudo systemctl start php7.2-fpm
## Enable auto-start at boot time.

  $     sudo systemctl enable php7.2-fpm
## Check status:

  $     systemctl status php7.2-fpm
## Sample output:
● php7.2-fpm.service - The PHP 7.2 FastCGI Process Manager
   Loaded: loaded (/lib/systemd/system/php7.2-fpm.service; enabled; vendor prese
   Active: active (running) since Thu 2018-05-17 03:04:46 UTC; 2min 43s ago
     Docs: man:php-fpm7.2(8)
 Main PID: 31922 (php-fpm7.2)
   Status: "Processes active: 0, idle: 2, Requests: 0, slow: 0, Traffic: 0req/se
    Tasks: 3 (limit: 2059)
   CGroup: /system.slice/php7.2-fpm.service
           ├─31922 php-fpm: master process (/etc/php/7.2/fpm/php-fpm.conf)
           ├─31939 php-fpm: pool www
           └─31940 php-fpm: pool www

Step 5: Create a Nginx Server Block
## A Nginx server block is like a virtual host in Apache. We will not use the default server block because it’s inadequate to run PHP code and if we modify it, it becomes a mess. So remove the default symlink in sites-enabled directory by running the following command. (It’s still available as /etc/nginx/sites-available/default.)

  $     sudo rm /etc/nginx/sites-enabled/default
## Then create a brand new server block file under /etc/nginx/conf.d/ directory.

  $     sudo nano /etc/nginx/conf.d/default.conf
## Paste the following text into the file. The following snippet will make Nginx listen on IPv4 port 80 and IPv6 port 80 with a catch-all server name.

  $     server {
  listen 80;
  listen [::]:80;
  server_name _;
  root /usr/share/nginx/html/;
  index index.php index.html index.htm index.nginx-debian.html;

  location / {
    try_files $uri $uri/ /index.php;
  }

  location ~ \.php$ {
    fastcgi_pass unix:/run/php/php7.2-fpm.sock;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
    include snippets/fastcgi-php.conf;
  }


 # A long browser cache lifetime can speed up repeat visits to your page
  location ~* \.(jpg|jpeg|gif|png|webp|svg|woff|woff2|ttf|css|js|ico|xml)$ {
       access_log        off;
       log_not_found     off;
       expires           360d;
  }

  # disable access to hidden files
  location ~ /\.ht {
      access_log off;
      log_not_found off;
      deny all;
  }
}

## Save and close the file. Then test Nginx configurations.

  $     sudo nginx -t
## If the test is successful, reload Nginx.

  $     sudo systemctl reload nginx

Step 6: Test PHP
## To test PHP-FPM with Nginx Web server, we need to create a info.php file in the document root directory.

  $     sudo nano /usr/share/nginx/html/info.php
## Paste the following PHP code into the file.

  $     <?php phpinfo(); ?>
  
## Save and close the file. Now in the browser address bar, enter server-ip-address/info.php. Replace sever-ip-address with your actual IP. If you follow this tutorial on your local computer, then type 127.0.0.1/info.php or localhost/info.php.

## You should see your server’s PHP information. This means PHP scripts can run properly with Nginx web server.

## Congrats! You have successfully installed Nginx, MariaDB and PHP7.2 on Ubuntu 18.04. For your server’s security, you should delete info.php file now to prevent hacker seeing it.

  $     sudo rm /usr/share/nginx/html/info.php
  
